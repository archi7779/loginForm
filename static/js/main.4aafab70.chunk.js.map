{"version":3,"sources":["components/LoginForm.jsx","serviceWorker.js","index.jsx"],"names":["MyInput","props","useField","field","meta","error","touched","validationSchema","yup","acceptTerms","oneOf","name","required","max","email","website","url","age","moreThan","lessThan","password","matches","repeatPassword","LoginForm","state","res","undefined","this","className","validateOnChange","initialValues","skills","onSubmit","data","setSubmitting","resetForm","_","dataToSend","a","async","setState","axios","method","response","sendDataToServer","values","errors","message","placeholder","classNames","inputError","arrayHelpers","key","slice","map","item","index","type","onClick","push","htmlFor","as","Input","htmlType","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8WAQA,SAASA,EAAQC,GAAQ,IAAD,EACAC,YAASD,GADT,mBACfE,EADe,KACRC,EADQ,KAEtB,OACE,oCACE,kBAAC,IAAD,iBAAWD,EAAWF,IACrBG,EAAKC,OAASD,EAAKE,SAAW,6BAAMF,EAAKC,QAKhD,IAAME,EAAmBC,SAAW,CAClCC,YAAaD,YAAcE,MAAM,EAAC,GAAO,oCACzCC,KAAMH,WAEHI,WACAC,IAAI,IACPC,MAAON,WAEJM,QACAF,SAAS,2BACZG,QAASP,WAAaQ,MACtBC,IAAKT,WAEFU,SAAS,IACTC,SAAS,IACTP,WACHQ,SAAUZ,WAEPI,SAAS,8BACTS,QAAQ,mBAAoB,qCAC5BA,QAAQ,mBAAoB,yCAC5BA,QAAQ,oBAAqB,2DAChCC,eAAgBd,WAEbI,WACAF,MAAM,CAACF,MAAQ,YAAa,MAAO,0BAGnBe,E,YACnB,WAAYtB,GAAQ,IAAD,8BACjB,4CAAMA,KACDuB,MAAQ,CACXC,SAAKC,EACLrB,WAAOqB,GAJQ,E,sEAQT,IAAD,SACgBC,KAAKH,MAApBC,EADD,EACCA,IAAKpB,EADN,EACMA,MACb,OACE,yBAAKuB,UAAU,eACb,kBAAC,IAAD,CACEC,kBAAgB,EAChBC,cAAe,CACbnB,KAAM,GACNS,SAAU,GACVE,eAAgB,GAChBR,MAAO,GACPC,QAAS,GACTE,SAAKS,EACLK,OAAQ,GACRtB,aAAa,GAEfF,iBAAkBA,EAClByB,SAAU,SAACC,EAAD,GAAyC,IAAhCC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UAChCD,GAAc,GACd,IAAMH,EAASK,UAAUH,EAAKF,QACxBM,EAAU,eAAQJ,EAAR,CAAcF,YACL,mBAAAO,EAAAC,OAAA,uDACvB,EAAKC,SAAS,CACZf,SAAKC,EACLrB,WAAOqB,IAHc,oBAAAY,EAAA,MAMEG,IAAM,CAC3BC,OAAQ,OACR1B,IAAK,gCACLiB,KAAMI,KATa,OAMfM,EANe,OAWrB,EAAKH,SAAS,CAAEf,IAAKkB,IACrBR,IAZqB,gDAcrB,EAAKK,SAAS,CAAEnC,MAAM,EAAD,KAdA,wDAiBzBuC,GACAV,GAAc,MAGf,gBAAGW,EAAH,EAAGA,OAAQC,EAAX,EAAWA,OAAQxC,EAAnB,EAAmBA,QAAnB,OACC,oCACGmB,GAAO,6BAAMA,EAAIQ,MACjB5B,GAAS,yBAAKuB,UAAU,gBAAgBvB,EAAM0C,SAC/C,kBAAC,IAAD,CAAMnB,UAAU,aACd,kBAAC5B,EAAD,CACEW,KAAK,OACLqC,YAAY,gBACZpB,UAAWqB,IAAW,CAAEC,WAAYJ,EAAOnC,MAAQL,EAAQK,SAG7D,kBAACX,EAAD,CACEW,KAAK,WACLqC,YAAY,oBACZpB,UAAWqB,IAAW,CAAEC,WAAYJ,EAAO1B,UAAYd,EAAQc,aAGjE,kBAACpB,EAAD,CACEW,KAAK,iBACLqC,YAAY,qBACZpB,UAAWqB,IAAW,CACpBC,WAAYJ,EAAOxB,gBAAkBhB,EAAQgB,mBAIjD,kBAACtB,EAAD,CACEW,KAAK,QACLqC,YAAY,iBACZpB,UAAWqB,IAAW,CAAEC,WAAYJ,EAAOhC,OAASR,EAAQQ,UAG9D,kBAACd,EAAD,CACEW,KAAK,UACLqC,YAAY,mBACZpB,UAAWqB,IAAW,CAAEC,WAAYJ,EAAO/B,SAAWT,EAAQS,YAGhE,kBAACf,EAAD,CACEW,KAAK,MACLqC,YAAY,eACZpB,UAAWqB,IAAW,CAAEC,WAAYJ,EAAO7B,KAAOX,EAAQW,QAG5D,kBAAC,IAAD,CAAYN,KAAK,WACd,SAAAwC,GAAY,OACX,yBAAKvB,UAAU,YACb,kBAAC5B,EAAD,CAASW,KAAK,YAAYqC,YAAY,iBAAiBI,IAAK,IAC3DP,EAAOd,OAAOsB,MAAM,GAAGC,KAAI,SAACC,EAAMC,GAAP,OAC1B,kBAACxD,EAAD,CACEW,KAAI,iBAAY6C,EAAQ,EAApB,KACJR,YAAY,iBAEZI,IAAKI,OAGT,kBAAC,IAAD,CACEC,KAAK,UACLC,QAAS,kBAAMb,EAAOd,OAAO,IAAMoB,EAAaQ,SAFlD,iBASN,2BAAOC,QAAQ,eACb,kBAAC,IAAD,CACEjD,KAAK,cACL8C,KAAK,WACLI,GAAIC,IACJlC,UAAWqB,IAAW,CAAEC,WAAYJ,EAAOrC,gBAC1C,IANL,eAOe,KAEdqC,EAAOrC,YAAc,6BAAMqC,EAAOrC,aAAqB,KACxD,kBAAC,IAAD,CAAQgD,KAAK,UAAUM,SAAS,UAAhC,iB,GA7HuBC,IAAMC,W,cClCzBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAAeC,SAASC,eAAe,SD0HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4aafab70.chunk.js","sourcesContent":["import React from 'react';\nimport { Field, Form, Formik, FieldArray, useField } from 'formik';\nimport { Input, Button } from 'antd';\nimport * as yup from 'yup';\nimport classNames from 'classnames';\nimport axios from 'axios';\nimport * as _ from 'lodash';\n\nfunction MyInput(props) {\n  const [field, meta] = useField(props);\n  return (\n    <>\n      <Input {...field} {...props} />\n      {meta.error && meta.touched && <div>{meta.error}</div>}\n    </>\n  );\n}\n\nconst validationSchema = yup.object({\n  acceptTerms: yup.boolean().oneOf([true], 'Must Accept Terms and Conditions'),\n  name: yup\n    .string()\n    .required()\n    .max(50),\n  email: yup\n    .string()\n    .email()\n    .required('Please Enter your Email'),\n  website: yup.string().url(),\n  age: yup\n    .number()\n    .moreThan(18)\n    .lessThan(65)\n    .required(),\n  password: yup\n    .string()\n    .required('Please Enter your password')\n    .matches('([0-9]+)([a-z]*)', 'Must Contain at least  One Number')\n    .matches('([A-Z]+)([0-9]*)', 'Must Contain at least  One Uppercase ')\n    .matches('[a-zA-Z0-9]{8,40}', 'Must Contain 8-40 Characters, One Uppercase, One Number'),\n  repeatPassword: yup\n    .string()\n    .required()\n    .oneOf([yup.ref('password'), null], 'Passwords must match'),\n});\n\nexport default class LoginForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      res: undefined,\n      error: undefined,\n    };\n  }\n\n  render() {\n    const { res, error } = this.state;\n    return (\n      <div className=\"mainWrapper\">\n        <Formik\n          validateOnChange\n          initialValues={{\n            name: '',\n            password: '',\n            repeatPassword: '',\n            email: '',\n            website: '',\n            age: undefined,\n            skills: [],\n            acceptTerms: false,\n          }}\n          validationSchema={validationSchema}\n          onSubmit={(data, { setSubmitting, resetForm }) => {\n            setSubmitting(true);\n            const skills = _.compact(data.skills);\n            const dataToSend = { ...data, skills };\n            const sendDataToServer = async () => {\n              this.setState({\n                res: undefined,\n                error: undefined,\n              });\n              try {\n                const response = await axios({\n                  method: 'post',\n                  url: 'http://localhost:3002/sign-up',\n                  data: dataToSend,\n                });\n                this.setState({ res: response });\n                resetForm();\n              } catch (err) {\n                this.setState({ error: err });\n              }\n            };\n            sendDataToServer();\n            setSubmitting(false);\n          }}\n        >\n          {({ values, errors, touched }) => (\n            <>\n              {res && <div>{res.data}</div>}\n              {error && <div className=\"errorMessage\">{error.message}</div>}\n              <Form className=\"loginForm\">\n                <MyInput\n                  name=\"name\"\n                  placeholder=\"enter ur name\"\n                  className={classNames({ inputError: errors.name && touched.name })}\n                />\n\n                <MyInput\n                  name=\"password\"\n                  placeholder=\"enter ur password\"\n                  className={classNames({ inputError: errors.password && touched.password })}\n                />\n\n                <MyInput\n                  name=\"repeatPassword\"\n                  placeholder=\"repeat ur password\"\n                  className={classNames({\n                    inputError: errors.repeatPassword && touched.repeatPassword,\n                  })}\n                />\n\n                <MyInput\n                  name=\"email\"\n                  placeholder=\"enter ur email\"\n                  className={classNames({ inputError: errors.email && touched.email })}\n                />\n\n                <MyInput\n                  name=\"website\"\n                  placeholder=\"enter ur website\"\n                  className={classNames({ inputError: errors.website && touched.website })}\n                />\n\n                <MyInput\n                  name=\"age\"\n                  placeholder=\"enter ur age\"\n                  className={classNames({ inputError: errors.age && touched.age })}\n                />\n\n                <FieldArray name=\"skills\">\n                  {arrayHelpers => (\n                    <div className=\"fieldArr\">\n                      <MyInput name=\"skills[0]\" placeholder=\"enter ur skill\" key={0} />\n                      {values.skills.slice(1).map((item, index) => (\n                        <MyInput\n                          name={`skills[${index + 1}]`}\n                          placeholder=\"enter ur skill\"\n                          /* eslint-disable-next-line react/no-array-index-key */\n                          key={index}\n                        />\n                      ))}\n                      <Button\n                        type=\"primary\"\n                        onClick={() => values.skills[0] && arrayHelpers.push()}\n                      >\n                        Add Skill\n                      </Button>\n                    </div>\n                  )}\n                </FieldArray>\n                <label htmlFor=\"acceptTerms\">\n                  <Field\n                    name=\"acceptTerms\"\n                    type=\"checkBox\"\n                    as={Input}\n                    className={classNames({ inputError: errors.acceptTerms })}\n                  />{' '}\n                  Accept Terms{' '}\n                </label>\n                {errors.acceptTerms ? <div>{errors.acceptTerms}</div> : null}\n                <Button type=\"primary\" htmlType=\"submit\">\n                  sub\n                </Button>\n              </Form>\n            </>\n          )}\n        </Formik>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport LoginForm from './components/LoginForm';\nimport './styles/index.sass';\nimport 'antd/dist/antd.css';\nimport * as serviceWorker from './serviceWorker';\n\n// а реально формы через фомик сделать экспортируемымы модулями, а то у меня не получилось с первого раза\n\nReactDOM.render(<LoginForm />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}