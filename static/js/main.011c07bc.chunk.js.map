{"version":3,"sources":["components/LoginForm.jsx","serviceWorker.js","index.jsx"],"names":["validationSchema","yup","acceptTerms","oneOf","name","required","max","email","website","url","age","moreThan","lessThan","password","matches","repeatPassword","LoginForm","props","state","res","undefined","error","this","className","validateOnChange","initialValues","skills","onSubmit","data","setSubmitting","_","dataToSend","a","async","setState","axios","method","response","sendDataToServer","values","errors","touched","message","type","as","Input","placeholder","classNames","inputError","arrayHelpers","key","length","slice","map","item","index","onClick","push","htmlFor","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.011c07bc.chunk.js","sourcesContent":["import React from 'react';\nimport { Field, Form, Formik, FieldArray } from 'formik';\nimport { Input } from 'antd';\nimport * as yup from 'yup';\nimport classNames from 'classnames';\nimport axios from 'axios';\nimport * as _ from 'lodash';\n\nconst validationSchema = yup.object({\n  acceptTerms: yup.boolean().oneOf([true], 'Must Accept Terms and Conditions'),\n  name: yup\n    .string()\n    .required()\n    .max(50),\n  email: yup\n    .string()\n    .email()\n    .required('Please Enter your Email'),\n  website: yup.string().url(),\n  age: yup\n    .number()\n    .moreThan(18)\n    .lessThan(65)\n    .required(),\n  password: yup\n    .string()\n    .required('Please Enter your password')\n    .matches(\n      '^(?=.*[A-Za-z])(?=.*d)(?=.*[@$!%*#?&])[A-Za-zd@$!%*#?&]{8,}$',\n      'Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character'\n    ),\n  repeatPassword: yup\n    .string()\n    .required()\n    .oneOf([yup.ref('password'), null], 'Passwords must match'),\n});\n\nexport default class LoginForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      res: undefined,\n      error: undefined,\n    };\n  }\n\n  render() {\n    const { res, error } = this.state;\n    return (\n      <div className=\"mainWrapper\">\n        <Formik\n          validateOnChange\n          initialValues={{\n            name: '',\n            password: '',\n            repeatPassword: '',\n            email: '',\n            website: '',\n            age: undefined,\n            skills: [],\n            acceptTerms: false,\n          }}\n          validationSchema={validationSchema}\n          onSubmit={(data, { setSubmitting }) => {\n            setSubmitting(true);\n            const skills = _.compact(data.skills);\n            const dataToSend = { ...data, skills };\n            const sendDataToServer = async () => {\n              this.setState({\n                res: undefined,\n                error: undefined,\n              });\n              try {\n                const response = await axios({\n                  method: 'post',\n                  url: 'http://localhost:3002/sign-up',\n                  data: dataToSend,\n                });\n                this.setState({ res: response });\n                // resetForm() kak sdelat'?\n              } catch (err) {\n                this.setState({ error: err });\n              }\n            };\n            sendDataToServer();\n            setSubmitting(false);\n          }}\n        >\n          {({ values, errors, touched }) => (\n            <>\n              {res && <div>{res.data}</div>}\n              {error && <div className=\"errorMessage\">{error.message}</div>}\n              <Form className=\"loginForm\">\n                <Field\n                  name=\"name\"\n                  type=\"input\"\n                  as={Input}\n                  placeholder=\"enter ur name\"\n                  className={classNames({ inputError: errors.name })}\n                />\n                {errors.name && touched.name ? <div>{errors.name}</div> : null}\n                <Field\n                  name=\"password\"\n                  type=\"password\"\n                  as={Input}\n                  placeholder=\"enter ur password\"\n                  className={classNames({ inputError: errors.password })}\n                />\n                {errors.password && touched.password ? <div>{errors.password}</div> : null}\n                <Field\n                  name=\"repeatPassword\"\n                  type=\"password\"\n                  as={Input}\n                  placeholder=\"repeat ur password\"\n                  className={classNames({ inputError: errors.repeatPassword })}\n                />\n                {errors.repeatPassword && touched.repeatPassword ? (\n                  <div>{errors.repeatPassword}</div>\n                ) : null}\n                <Field\n                  name=\"email\"\n                  type=\"input\"\n                  as={Input}\n                  placeholder=\"enter ur email\"\n                  className={classNames({ inputError: errors.email })}\n                />\n                {errors.email && touched.email ? <div>{errors.email}</div> : null}\n\n                <Field\n                  name=\"website\"\n                  type=\"input\"\n                  as={Input}\n                  placeholder=\"enter ur website\"\n                  className={classNames({ inputError: errors.website })}\n                />\n                {errors.website && touched.website ? <div>{errors.website}</div> : null}\n                <Field\n                  name=\"age\"\n                  type=\"input\"\n                  as={Input}\n                  placeholder=\"enter ur age\"\n                  className={classNames({ inputError: errors.age })}\n                />\n                {errors.age && touched.age ? <div>{errors.age}</div> : null}\n                <FieldArray name=\"skills\">\n                  {arrayHelpers => (\n                    <div className=\"fieldArr\">\n                      <Field\n                        name=\"skills[0]\"\n                        type=\"input\"\n                        as={Input}\n                        placeholder=\"enter ur skill\"\n                        key={`${values.skills.length}`}\n                      />\n                      {values.skills.slice(1).map((item, index) => (\n                        <Field\n                          name={`skills[${index + 1}]`}\n                          type=\"input\"\n                          as={Input}\n                          placeholder=\"enter ur skill\"\n                          /* eslint-disable-next-line react/no-array-index-key */\n                          key={index}\n                        />\n                      ))}\n                      <button type=\"button\" onClick={() => values.skills[0] && arrayHelpers.push()}>\n                        Add Skill\n                      </button>\n                    </div>\n                  )}\n                </FieldArray>\n                <label htmlFor=\"acceptTerms\">\n                  <Field\n                    name=\"acceptTerms\"\n                    type=\"checkBox\"\n                    as={Input}\n                    className={classNames({ inputError: errors.acceptTerms })}\n                  />{' '}\n                  Accept Terms{' '}\n                </label>\n                {errors.acceptTerms ? <div>{errors.acceptTerms}</div> : null}\n                <button type=\"submit\">sub</button>\n              </Form>\n            </>\n          )}\n        </Formik>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport LoginForm from './components/LoginForm';\nimport './styles/index.sass';\nimport 'antd/dist/antd.css';\nimport * as serviceWorker from './serviceWorker';\n\n// а реально формы через фомик сделать экспортируемымы модулями, а то у меня не получилось с первого раза\n\nReactDOM.render(<LoginForm />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}